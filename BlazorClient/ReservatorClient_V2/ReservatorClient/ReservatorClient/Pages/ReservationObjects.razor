@page "/items"
@using Models
@using ReservatorClient.Components.Common
@inject HttpClient Http
@inject AppState AppState
@inject IUriHelper UriHelper

<h1 style="margin-bottom:50px">Items</h1>

<button class="btn btn-sm btn-primary" style="margin-bottom:20px" @onclick="@(()=> UriHelper.NavigateTo("items/add"))"><i class="fa fa-plus m-1" />Add new</button>

@if (isError)
{
	<div class="alert alert-danger">@errorMessage</div>
}

@if (AppState?.ReservationObjects != null && AppState.ReservationObjects.Any())
{
	<Table Items="@AppState.ReservationObjects">
		<Header>
			<th>Item</th>
			<th>Description</th>
			<th>Maximum reservaton time (days)</th>
			<th></th>
		</Header>
		<Row>
			<td><a href=@("/items/edit/" + context.ID)>@context.Name</a></td>
			<td>@context.Description</td>
			<td>@context.MaximumReservationTime.ToString()</td>
			<td>
				<button class="btn btn-sm btn-danger" @onclick="@(() => DeleteResevationObject(context.ID.GetValueOrDefault()))">
					<i class="fa fa-trash m-1" />
					Delete
				</button>
			</td>
		</Row>
	</Table>
}
else
{
	<label>Nothing to be displayed here!</label>
}


@code {
	bool isError = false;
	string errorMessage = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		AppState.OnChange += StateHasChanged;

		await AppState.GetReservationObjects();
	}

	async void DeleteResevationObject(int? id)
	{
		if (id.GetValueOrDefault() > 0)
		{
			isError = false;
			List<ReservationObject> originalReservationObjects = AppState.ReservationObjects;

			AppState.ReservationObjects = AppState.ReservationObjects.Where(x => x.ID != id).ToList();

			try
			{
				await AppState.DeleteReservationObject(id.GetValueOrDefault());
			}
			catch
			{
				isError = true;
				errorMessage = "An unexpected error has occured!";
				AppState.ReservationObjects = originalReservationObjects;
				StateHasChanged();
			}
		}
	}
}
