@page "/"
@page "/reservations"
@using Models
@using ReservatorClient.Components.Common
@inject AppState AppState
@inject IUriHelper UriHelper

<h1 style="margin-bottom:50px">My reservations</h1>

<button class="btn btn-sm btn-primary" style="margin-bottom:20px" @onclick="@(()=> UriHelper.NavigateTo("reservations/add"))"><i class="fa fa-plus m-1" />Add new</button>

@if (isError)
{
	<div class="alert alert-danger">@errorMessage</div>
}

@if (AppState?.Reservations != null && AppState.Reservations.Any())
{
	<Table Items="@AppState.Reservations">
		<Header>
			<th>Item</th>
			<th>Item description</th>
			<th>Date from</th>
			<th>Date to</th>
			<th></th>
		</Header>
		<Row>
			<td>@context.ReservationObjectName</td>
			<td>@context.ReservationObjectDescription</td>
			<td>@context.DateFrom.ToString()</td>
			<td>@context.DateTo.ToString()</td>
			<td>
				<button class="btn btn-sm btn-danger" @onclick="@(() => DeleteResevation(context.ID.GetValueOrDefault()))">
					<i class="fa fa-trash m-1" />
					Delete
				</button>
			</td>
		</Row>
	</Table>
}
else
{
	<label>Nothing to be displayed here!</label>
}


@code {
	bool isError = false;
	string errorMessage = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		AppState.OnChange += StateHasChanged;

		await AppState.GetReservations();
	}

	async void DeleteResevation(int id)
	{
		if (id > 0)
		{
			isError = false;
			List<Reservation> originalReservations = AppState.Reservations;

			AppState.Reservations = AppState.Reservations.Where(x => x.ID != id).ToList();

			try
			{
				await AppState.DeleteReservation(id);
			}
			catch
			{
				isError = true;
				errorMessage = "An unexpected error has occured!";
				AppState.Reservations = originalReservations;
				StateHasChanged();
			}
		}
	}
}
